// NAME EmptyVoidFunction
// ERR 0
// RET 1

fn f() void { }

fn main() i32 {
    return 1;
}

// NAME EmptyVoidFunctionImplicitRet
// ERR 0
// RET 1

fn f() {  }

fn main() i32 {
    return 1;
}


// NAME FunctionScopeIndependence
// ERR 1
// RET 0

fn f() void {
    x = x + 1;
}

fn main() i32 {
    var x = 1;
}


// NAME ReturnIntNoConversionFunction
// ERR 0
// RET 5

fn f() i32 {
    var x: i32 = 5;
    return x;
}

fn main() i32 {
    return f();
}


// NAME ReturnIntWithConversionError
// ERR 1
// RET 0

fn f() i16 {
    var x: i32 = 5;
    return x;
}

fn main() i32 {
    var x: i16 = f();
    return 1;
}


// NAME ReturnIntWithConversionFunctionReturn
// ERR 1
// RET 0

fn f() i16 {
    var x: i32 = 5;
    return x;
}

fn main() i32 {
    return f();
}


// NAME ReturnIntWithArithmetic
// ERR 0
// RET 15

fn f() i32 {
    var x: i32 = 5;
    var y: i32 = 10;
    return x + y;
}

fn main() i32 {
    return f();
}


// NAME ReturnIntWithArithmeticConversionError
// ERR 1
// RET 0

fn f() i16 {
    var x: i32 = 5;
    var y: i32 = 10;
    return x + y;
}

fn main() i32 {
    var x: i16 = f();
    return 1;
}



// NAME FunctionWithIfStatement
// ERR 0
// RET 10

fn f() i32 {
    var x: i32 = 5;
    if (x > 3) {
        return 10;
    } else {
        return 0;
    }
}

fn main() i32 {
    return f();
}


// NAME ForLoopSimple
// ERR 0
// RET 45

fn f() i32 {
    var sum: i32 = 0;
    for (var i = 0; i < 10; i = i + 1) {
        sum = sum + i;
    }
    return sum;
}

fn main() i32 {
    return f();
}


// NAME ForLoopWithConditionInside
// ERR 0
// RET 20

fn f() i32 {
    var sum: i32 = 0;
    for (var i = 0; i < 10; i = i + 1) {
        if (i % 2 == 0) {
            sum = sum + i;
        }
    }
    return sum;
}

fn main() i32 {
    return f();
}


// NAME IfElseWithLoop
// ERR 0
// RET 10

fn f() i32 {
    var sum: i32 = 0;
    var x: i32 = 3;
    if (x > 2) {
        for (var i = 0; i < 5; i = i + 1) {
            sum = sum + i;
        }
    } else {
        sum = sum - 1;
    }
    return sum;
}

fn main() i32 {
    return f();
}

// NAME LessArgumentsThanExpected
// ERR 1
// RET 0

fn f(x: i32, y: i32) i32 {
    return x + y;
}

fn main() i32 {
    return f(1);
}

// NAME MoreArgumentsThanExpected
// ERR 1
// RET 0

fn f(x: i32) i32 {
    return x;
}

fn main() i32 {
    return f(1, 2);
}

// NAME MutualRecursion
// ERR 0
// RET 10

fn is_even(n: i32) bool {
    if (n == 0) { return true; }
    return is_odd(n - 1);
}

fn is_odd(n: i32) bool {
    if (n == 0) { return false; }
    return is_even(n - 1);
}

fn main() i32 {
    if (is_even(5000)) {
        return 10;
    }
    return 0;
}

// NAME RecursiveFactorial
// ERR 0
// RET 120

fn factorial(n: i32) i32 {
    if (n == 0) { return 1; }
    return n * factorial(n - 1);
}

fn main() i32 {
    return factorial(5);
}

// NAME RecursiveFibonacci
// ERR 0
// RET 21

fn fibonacci(n: i32) i32 {
    if (n == 0) { return 0; }
    if (n == 1) { return 1; }
    return fibonacci(n - 1) + fibonacci(n - 2);
}

fn main() i32 {
    return fibonacci(8);
}

// NAME RecursiveAckermann
// ERR 0
// RET 125

fn ackermann(m: i32, n: i32) i32 {
    if (m == 0) { return n + 1; }
    if (n == 0) { return ackermann(m - 1, 1); }
    return ackermann(m - 1, ackermann(m, n - 1));
}

fn main() i32 {
    return ackermann(3, 4);
}