// NAME EmptyClass
// ERR 0
// RET 0

class X {  }

fn main() i32 {
    return 0;
}

// NAME EmptyClassWithConstructor
// ERR 0
// RET 0

class X {
    constructor(self: X*) { }
}

fn main() i32 {
    return 0;
}

// NAME ClassWithDeclaration
// ERR 0
// RET 0

class X {
    var x: i32;
    constructor(self: X*) {}
}

fn main() i32 {
    return 0;
}

// NAME ClassSetFieldInConstructor
// ERR 0
// RET 0

class X {
    var x: i32;
    constructor(self: X*) {
        self.x = 0;
    }
}

fn main() i32 {
    return 0;
}

// NAME ClassConstructorWithParameter
// ERR 0
// RET 5

class X {
    var a: i32;
    constructor(self: X*, x: i32) {
        self.a = x;
    }
}

fn main() i32 {
    var x: X = X(5);
    return x.a;
}

// NAME ClassWithUndefinedFieldAccess
// ERR 1
// RET 0

class X {
    constructor(self: X*) {
        self.x = 0;
    }
}

fn main() i32 {
    return 0;
}

// NAME InstanceAsAValueParameter
// ERR 0
// RET 5

class X {
    var a: i32;
    constructor(self: X*, x: i32) {
        self.a = x;
    }
}

fn mod(x: X){
    x.a = 12;
}

fn main() i32 {
    var x: X = X(5);
    mod(x);
    return x.a;
}

// NAME InstanceAsAPointerParameter
// ERR 0
// RET 12

class X {
    var a: i32;
    constructor(self: X*, x: i32) {
        self.a = x;
    }
}

fn mod(x: X*) {
    x.a = 12;
}

fn main() i32 {
    var x: X = X(5);
    mod(&x);
    return x.a;
}

// NAME MemberAccessReference
// ERR 0
// RET 6

class X {
    var a: i32;
    constructor(self: X*, x: i32) {
        self.a = x;
    }
}

fn main() i32 {
    var x: X = X(5);
    x.a = x.a + 1;
    return x.a;
}

// NAME MethodCall
// ERR 0
// RET 7

class X {
    var a: i32;
    constructor(self: X*, x: i32) {
        self.a = x;
    }

    fn inc(self: X*) {
        self.a = self.a + 1;
    }
}

fn main() i32 {
    var x: X = X(5);
    x.inc();
    x.inc();
    return x.a;
}

// NAME MethodCallWithParameter
// ERR 0
// RET 10

class X {
    var a: i32;
    constructor(self: X*, x: i32) {
        self.a = x;
    }

    fn add(self: X*, x: i32) {
        self.a = self.a + x;
    }
}

fn main() i32 {
    var x: X = X(5);
    x.add(2);
    x.add(3);
    return x.a;
}

// NAME MethodCallWithMultipleParameters
// ERR 0
// RET 15

class X {
    var a: i32;
    constructor(self: X*, x: i32) {
        self.a = x;
    }

    fn add(self: X*, x: i32, y: i32) {
        self.a = self.a + x + y;
    }
}

fn main() i32 {
    var x: X = X(5);
    x.add(2, 3);
    x.add(4, 1);
    return x.a;
}

// NAME MethodCallWithMultipleParametersAndFieldAccess
// ERR 0
// RET 24

class X {
    var a: i32;
    constructor(self: X*, x: i32) {
        self.a = x;
    }

    fn add(self: X*, x: i32, y: i32) {
        self.a = self.a + x + y;
    }
}

fn main() i32 {
    var x: X = X(5);
    x.add(2, 3);
    x.add(4, x.a);
    return x.a;
}

// NAME MethodCallWithMultipleParametersAndFieldAccessAndReturn
// ERR 0
// RET 7

class X {
    var a: i32;
    constructor(self: X*, x: i32) {
        self.a = x;
    }

    fn add(self: X*, x: i32) i32 {
        return self.a = self.a + x;
    }
}

fn main() i32 {
    var x: X = X(5);
    return x.add(2);
}

// NAME MethodWithReturnMatch
// ERR 0
// RET 13

cdecl fn printf(fmt: char*, ...) i32;

class Fibonacci {
    constructor(self: Fibonacci*) {
    }

    fn get(self: Fibonacci*, n: i32) i32 {
        return match n {
            0 => 0,
            1 => 1,
            default => self.get(n - 1) + self.get(n - 2),
        };
    }
}

fn main() i32 {
    var fib: Fibonacci = Fibonacci();
    return fib.get(7);
}